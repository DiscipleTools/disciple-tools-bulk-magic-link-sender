import{s as e,r as o,$ as t}from"../../lit-element-36d48372.js";import"../../icons/dt-spinner.js";import"../../icons/dt-checkmark.js";window.customElements.define("dt-single-select",class extends e{static get styles(){return o`:host{position:relative;--borderWidth:3px;--borderColor:#78b13f}select{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:#fefefe;background-image:url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'><polygon points='0,0 32,0 16,24' style='fill: rgb%28138, 138, 138%29'></polygon></svg>");background-origin:content-box;background-position:right -1.0666666667rem center;background-repeat:no-repeat;background-size:9px 6px;border:1px solid var(--dt-component-border-color,#cacaca);border-radius:0;color:#0a0a0a;font-family:Helvetica,Arial,sans-serif;font-size:1rem;font-weight:300;height:2.5rem;line-height:1.5;margin:0 0 1.0666666667rem;padding:.5333333333rem 1.6rem .5333333333rem .5333333333rem;-webkit-transition:border-color .25s ease-in-out,-webkit-box-shadow .5s;transition:border-color .25s ease-in-out,-webkit-box-shadow .5s;transition:box-shadow .5s,border-color .25s ease-in-out;transition:box-shadow .5s,border-color .25s ease-in-out,-webkit-box-shadow .5s;-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;text-transform:none}select.color-select{background-image:url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'><polygon points='0,0 32,0 16,24' style='fill: white'></polygon></svg>");border:none;border-radius:10px;color:#fff;font-weight:700;text-shadow:rgb(0 0 0 / 45%) 0 0 6px}.icon-overlay{position:absolute;right:2rem;top:0;height:100%;display:flex;justify-content:center;align-items:center}`}static get properties(){return{name:{type:String},placeholder:{type:String},options:{type:Array},value:{type:String,reflect:!0},color:{type:String,state:!0},loading:{type:Boolean},saved:{type:Boolean},onchange:{type:String}}}updateColor(){if(this.value&&this.options){const e=this.options.filter((e=>e.id===this.value));e&&e.length&&(this.color=e[0].color)}}isColorSelect(){return(this.options||[]).reduce(((e,o)=>e||o.color),!1)}willUpdate(e){e.has("value")&&this.updateColor()}_change(e){const o=new CustomEvent("change",{detail:{oldValue:this.value,newValue:e.target.value}});this.value=e.target.value,this.dispatchEvent(o)}render(){return t`<select name="${this.name}" @change="${this._change}" class="${this.isColorSelect()?"color-select":null}" style="background-color:${this.color}" ?disabled="${this.loading}"><option disabled="disabled" selected="selected" hidden>${this.placeholder}</option>${this.options&&this.options.map((e=>t`<option value="${e.id}" ?selected="${e.id===this.value}">${e.label}</option>`))}</select> ${this.loading?t`<dt-spinner class="icon-overlay"></dt-spinner>`:null} ${this.saved?t`<dt-checkmark class="icon-overlay"></dt-checkmark>`:null}`}});
